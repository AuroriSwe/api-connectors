/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api-testnet.bybit.com]  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * WalletApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_WalletApi_H_
#define IO_SWAGGER_CLIENT_API_WalletApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  WalletApi
{
public:
    WalletApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~WalletApi();
    /// <summary>
    /// get wallet balance info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="coin">Coin.enum {BTC,EOS,XRP,ETH,USDT} (optional)</param>
    pplx::task<std::shared_ptr<Object>> wallet_getBalance(
        boost::optional<utility::string_t> coin
    );
    /// <summary>
    /// Get wallet fund records
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="startDate">Start point for result (optional)</param>
    /// <param name="endDate">End point for result (optional)</param>
    /// <param name="currency">Currency type (optional)</param>
    /// <param name="walletFundType">wallet fund type (optional)</param>
    /// <param name="page">Page. Default getting first page data (optional)</param>
    /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)</param>
    pplx::task<std::shared_ptr<Object>> wallet_getRecords(
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> currency,
        boost::optional<utility::string_t> walletFundType,
        boost::optional<utility::string_t> page,
        boost::optional<utility::string_t> limit
    );
    /// <summary>
    /// Get risk limit.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Object>> wallet_getRiskLimit(
    );
    /// <summary>
    /// Set risk limit
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    /// <param name="riskId">Risk ID. Can be found with the Get risk limit list endpoint.</param>
    pplx::task<std::shared_ptr<Object>> wallet_setRiskLimit(
        utility::string_t symbol,
        double riskId
    );
    /// <summary>
    /// Get wallet fund records
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="startDate">Start point for result (optional)</param>
    /// <param name="endDate">End point for result (optional)</param>
    /// <param name="coin">Currency (optional)</param>
    /// <param name="status">Withdraw status (optional)</param>
    /// <param name="page">Page. Default getting first page data (optional)</param>
    /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page (optional)</param>
    pplx::task<std::shared_ptr<Object>> wallet_withdraw(
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> coin,
        boost::optional<utility::string_t> status,
        boost::optional<utility::string_t> page,
        boost::optional<utility::string_t> limit
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_WalletApi_H_ */

