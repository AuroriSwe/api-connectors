/**
 * Bybit API
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PositionsApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_PositionsApi_H_
#define IO_SWAGGER_CLIENT_API_PositionsApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  PositionsApi
{
public:
    PositionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~PositionsApi();
    /// <summary>
    /// Update margin.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type which you want update its margin</param>
    /// <param name="margin">New margin you want set</param>
    pplx::task<std::shared_ptr<Object>> positions_changeMargin(
        utility::string_t symbol,
        utility::string_t margin
    );
    /// <summary>
    /// Get my position list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Object>> positions_myPosition(
    );
    /// <summary>
    /// Get my position list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type which you want update its margin (optional)</param>
    pplx::task<std::shared_ptr<Object>> positions_myPositionV2(
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Change user leverage.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">A symbol which you want change its leverage</param>
    /// <param name="leverage">New leverage you want set</param>
    pplx::task<std::shared_ptr<Object>> positions_saveLeverage(
        utility::string_t symbol,
        utility::string_t leverage
    );
    /// <summary>
    /// Set Trading-Stop Condition.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type</param>
    /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
    /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
    /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
    pplx::task<std::shared_ptr<Object>> positions_tradingStop(
        utility::string_t symbol,
        boost::optional<utility::string_t> takeProfit,
        boost::optional<utility::string_t> stopLoss,
        boost::optional<utility::string_t> trailingStop
    );
    /// <summary>
    /// Get user leverage setting.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Object>> positions_userLeverage(
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_PositionsApi_H_ */

