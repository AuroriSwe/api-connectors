/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api-testnet.bybit.com]  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ConditionalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConditionalApiTests
    {
        private ConditionalApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConditionalApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConditionalApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConditionalApi
            //Assert.IsInstanceOfType(typeof(ConditionalApi), instance, "instance is a ConditionalApi");
        }

        
        /// <summary>
        /// Test ConditionalCancel
        /// </summary>
        [Test]
        public void ConditionalCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stopOrderId = null;
            //var response = instance.ConditionalCancel(stopOrderId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConditionalCancelAll
        /// </summary>
        [Test]
        public void ConditionalCancelAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //var response = instance.ConditionalCancelAll(symbol);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConditionalGetOrders
        /// </summary>
        [Test]
        public void ConditionalGetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stopOrderId = null;
            //string orderLinkId = null;
            //string symbol = null;
            //string order = null;
            //decimal? page = null;
            //decimal? limit = null;
            //var response = instance.ConditionalGetOrders(stopOrderId, orderLinkId, symbol, order, page, limit);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConditionalNew
        /// </summary>
        [Test]
        public void ConditionalNewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string side = null;
            //string symbol = null;
            //string orderType = null;
            //decimal? qty = null;
            //double? basePrice = null;
            //double? stopPx = null;
            //string timeInForce = null;
            //double? price = null;
            //string triggerBy = null;
            //bool? closeOnTrigger = null;
            //string orderLinkId = null;
            //var response = instance.ConditionalNew(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConditionalReplace
        /// </summary>
        [Test]
        public void ConditionalReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //string stopOrderId = null;
            //string orderId = null;
            //decimal? pRQty = null;
            //double? pRPrice = null;
            //double? pRTriggerPrice = null;
            //var response = instance.ConditionalReplace(symbol, stopOrderId, orderId, pRQty, pRPrice, pRTriggerPrice);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
