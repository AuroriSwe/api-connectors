=begin
#Bybit API

### REST API for the Bybit Exchange. 

OpenAPI spec version: 1.0.0
Contact: support@bybit.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module SwaggerClient
  class ExecutionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get user’s trade records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id OrderID. If not provided, will return user’s trading records.
    # @option opts [String] :symbol Contract type. If order_id not provided, symbol is required.
    # @option opts [String] :start_time Start timestamp point for result.
    # @option opts [String] :page Page. Default getting first page data.
    # @option opts [String] :limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page.
    # @return [Object]
    def execution_get_trades(opts = {})
      data, _status_code, _headers = execution_get_trades_with_http_info(opts)
      data
    end

    # Get user’s trade records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id OrderID. If not provided, will return user’s trading records.
    # @option opts [String] :symbol Contract type. If order_id not provided, symbol is required.
    # @option opts [String] :start_time Start timestamp point for result.
    # @option opts [String] :page Page. Default getting first page data.
    # @option opts [String] :limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def execution_get_trades_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExecutionApi.execution_get_trades ...'
      end
      # resource path
      local_var_path = '/v2/private/execution/list'

      # query parameters
      query_params = {}
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey', 'apiSignature', 'timestamp']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExecutionApi#execution_get_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
